import java.util.*;

public class GrafoBDSDFS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Tipo de representación:\n1. Lista\n2. Matriz\n3. Aristas");
        int tipo = sc.nextInt();
        System.out.println("Tipo de búsqueda:\n1. BFS\n2. DFS");
        int metodo = sc.nextInt();

        // Grafo de ejemplo
        int n = 5;
        List<List<Integer>> lista = List.of(
            List.of(1, 3),
            List.of(0, 2),
            List.of(1, 4),
            List.of(0, 4),
            List.of(2, 3)
        );

        int[][] matriz = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 0, 0},
            {0, 1, 0, 0, 1},
            {1, 0, 0, 0, 1},
            {0, 0, 1, 1, 0}
        };

        List<int[]> aristas = List.of(
            new int[]{0,1}, new int[]{0,3},
            new int[]{1,2}, new int[]{2,4},
            new int[]{3,4}
        );

        // Función que retorna vecinos según tipo
        Grafo grafo = switch (tipo) {
            case 1 -> (v) -> lista.get(v);
            case 2 -> (v) -> {
                List<Integer> vecinos = new ArrayList<>();
                for (int i = 0; i < matriz.length; i++)
                    if (matriz[v][i] == 1) vecinos.add(i);
                return vecinos;
            };
            case 3 -> (v) -> {
                List<Integer> vecinos = new ArrayList<>();
                for (int[] a : aristas) {
                    if (a[0] == v) vecinos.add(a[1]);
                    if (a[1] == v) vecinos.add(a[0]);
                }
                return vecinos;
            };
            default -> throw new IllegalArgumentException("Tipo inválido");
        };

        System.out.println("\nGrafo:");
        mostrarGrafo(grafo, n);

        List<Integer> recorrido = (metodo == 1) ?
            bfs(grafo, 0, n) : dfs(grafo, 0, n);

        System.out.println("\nRecorrido: " + recorrido);
    }

    // Interfaz funcional para acceder a vecinos
    interface Grafo {
        List<Integer> vecinos(int nodo);
    }

    static void mostrarGrafo(Grafo g, int n) {
        for (int i = 0; i < n; i++)
            System.out.println(i + ": " + g.vecinos(i));
    }

    static List<Integer> bfs(Grafo g, int inicio, int n) {
        List<Integer> recorrido = new ArrayList<>();
        boolean[] visitado = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        visitado[inicio] = true;
        q.add(inicio);
        while (!q.isEmpty()) {
            int u = q.poll();
            recorrido.add(u);
            for (int v : g.vecinos(u)) {
                if (!visitado[v]) {
                    visitado[v] = true;
                    q.add(v);
                }
            }
        }
        return recorrido;
    }

    static List<Integer> dfs(Grafo g, int inicio, int n) {
        List<Integer> recorrido = new ArrayList<>();
        boolean[] visitado = new boolean[n];
        dfsRec(g, inicio, visitado, recorrido);
        return recorrido;
    }

    static void dfsRec(Grafo g, int u, boolean[] v, List<Integer> r) {
        v[u] = true;
        r.add(u);
        for (int w : g.vecinos(u))
            if (!v[w]) dfsRec(g, w, v, r);
    }
}
