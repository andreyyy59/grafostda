import java.util.*;

public class GrafoBusquedas {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Selecciona tipo de representación del grafo:");
        System.out.println("1. Lista de Adyacencia\n2. Matriz de Adyacencia\n3. Lista de Aristas");
        int tipo = sc.nextInt();

        System.out.println("Selecciona tipo de búsqueda:\n1. BFS (Anchura)\n2. DFS (Profundidad)");
        int metodo = sc.nextInt();

        int[][] matriz = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 0, 0},
            {0, 1, 0, 0, 1},
            {1, 0, 0, 0, 1},
            {0, 0, 1, 1, 0}
        };

        List<List<Integer>> lista = new ArrayList<>();
        for (int i = 0; i < 5; i++) lista.add(new ArrayList<>());
        lista.get(0).addAll(List.of(1, 3));
        lista.get(1).addAll(List.of(0, 2));
        lista.get(2).addAll(List.of(1, 4));
        lista.get(3).addAll(List.of(0, 4));
        lista.get(4).addAll(List.of(2, 3));

        List<int[]> aristas = List.of(
            new int[]{0,1}, new int[]{0,3},
            new int[]{1,2}, new int[]{2,4},
            new int[]{3,4}
        );

        int inicio = 0;
        System.out.print((metodo == 1 ? "BFS" : "DFS") + " (");
        switch (tipo) {
            case 1 -> {
                System.out.print("Lista): ");
                if (metodo == 1) bfsLista(lista, inicio); else dfsLista(lista, inicio, new boolean[lista.size()]);
            }
            case 2 -> {
                System.out.print("Matriz): ");
                if (metodo == 1) bfsMatriz(matriz, inicio); else dfsMatriz(matriz, inicio, new boolean[matriz.length]);
            }
            case 3 -> {
                System.out.print("Aristas): ");
                if (metodo == 1) bfsAristas(aristas, inicio, 5); else dfsAristas(aristas, inicio, new boolean[5]);
            }
        }
    }

    static void bfsLista(List<List<Integer>> g, int s) {
        boolean[] v = new boolean[g.size()];
        Queue<Integer> q = new LinkedList<>();
        v[s] = true; q.add(s);
        while (!q.isEmpty()) {
            int u = q.poll();
            System.out.print(u + " ");
            for (int w : g.get(u)) if (!v[w]) { v[w] = true; q.add(w); }
        }
    }

    static void dfsLista(List<List<Integer>> g, int s, boolean[] v) {
        v[s] = true;
        System.out.print(s + " ");
        for (int w : g.get(s)) if (!v[w]) dfsLista(g, w, v);
    }

    static void bfsMatriz(int[][] m, int s) {
        boolean[] v = new boolean[m.length];
        Queue<Integer> q = new LinkedList<>();
        v[s] = true; q.add(s);
        while (!q.isEmpty()) {
            int u = q.poll();
            System.out.print(u + " ");
            for (int i = 0; i < m.length; i++) if (m[u][i] == 1 && !v[i]) { v[i] = true; q.add(i); }
        }
    }

    static void dfsMatriz(int[][] m, int s, boolean[] v) {
        v[s] = true;
        System.out.print(s + " ");
        for (int i = 0; i < m.length; i++) if (m[s][i] == 1 && !v[i]) dfsMatriz(m, i, v);
    }

    static void bfsAristas(List<int[]> a, int s, int n) {
        boolean[] v = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        v[s] = true; q.add(s);
        while (!q.isEmpty()) {
            int u = q.poll();
            System.out.print(u + " ");
            for (int[] arista : a) {
                if (arista[0] == u && !v[arista[1]]) { v[arista[1]] = true; q.add(arista[1]); }
                if (arista[1] == u && !v[arista[0]]) { v[arista[0]] = true; q.add(arista[0]); }
            }
        }
    }

    static void dfsAristas(List<int[]> a, int s, boolean[] v) {
        v[s] = true;
        System.out.print(s + " ");
        for (int[] arista : a) {
            if (arista[0] == s && !v[arista[1]]) dfsAristas(a, arista[1], v);
            if (arista[1] == s && !v[arista[0]]) dfsAristas(a, arista[0], v);
        }
    }
}
