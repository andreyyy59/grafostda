import java.util.*;

public class GrafoDemo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Selecciona tipo de representación del grafo:");
        System.out.println("1. Lista de Adyacencia\n2. Matriz de Adyacencia\n3. Lista de Aristas");
        int opcion = sc.nextInt();

        switch (opcion) {
            case 1 -> demoListaAdyacencia();
            case 2 -> demoMatrizAdyacencia();
            case 3 -> demoListaAristas();
            default -> System.out.println("Opción no válida.");
        }
    }

    // ---------------------------- Lista de Adyacencia ----------------------------
    static void demoListaAdyacencia() {
        Map<Integer, List<Integer>> grafo = new HashMap<>();
        // agregar vértices
        for (int i = 0; i < 4; i++) grafo.put(i, new ArrayList<>());

        // agregar aristas
        grafo.get(0).add(1);
        grafo.get(1).add(2);
        grafo.get(2).add(3);

        // mostrar grafo
        System.out.println("Lista de Adyacencia:");
        grafo.forEach((k, v) -> System.out.println(k + " -> " + v));

        // eliminar arista (1,2)
        grafo.get(1).remove(Integer.valueOf(2));
        System.out.println("\nTras eliminar arista (1,2):");
        grafo.forEach((k, v) -> System.out.println(k + " -> " + v));

        // eliminar vértice 2
        grafo.remove(2);
        for (List<Integer> vecinos : grafo.values()) vecinos.remove(Integer.valueOf(2));
        System.out.println("\nTras eliminar vértice 2:");
        grafo.forEach((k, v) -> System.out.println(k + " -> " + v));

        // adyacentes de 0
        System.out.println("\nAdyacentes de 0: " + grafo.get(0));

        // grado de 1
        System.out.println("Grado de 1: " + grafo.get(1).size());
    }

    // ---------------------------- Matriz de Adyacencia ----------------------------
    static void demoMatrizAdyacencia() {
        int[][] matriz = new int[4][4];
        matriz[0][1] = 1;
        matriz[1][2] = 1;
        matriz[2][3] = 1;

        System.out.println("Matriz de Adyacencia:");
        mostrarMatriz(matriz);

        matriz[1][2] = 0;
        System.out.println("\nTras eliminar arista (1,2):");
        mostrarMatriz(matriz);

        // eliminar vértice 2 (borrar fila y columna)
        for (int i = 0; i < 4; i++) {
            matriz[2][i] = 0;
            matriz[i][2] = 0;
        }
        System.out.println("\nTras eliminar vértice 2:");
        mostrarMatriz(matriz);

        System.out.print("\nAdyacentes de 0: ");
        for (int j = 0; j < 4; j++) if (matriz[0][j] == 1) System.out.print(j + " ");
        System.out.println("\nGrado de 1: " + Arrays.stream(matriz[1]).sum());
    }

    static void mostrarMatriz(int[][] m) {
        for (int[] fila : m) System.out.println(Arrays.toString(fila));
    }

    // ---------------------------- Lista de Aristas ----------------------------
    static void demoListaAristas() {
        List<int[]> aristas = new ArrayList<>();
        aristas.add(new int[]{0, 1});
        aristas.add(new int[]{1, 2});
        aristas.add(new int[]{2, 3});

        System.out.println("Lista de Aristas:");
        mostrarAristas(aristas);

        aristas.removeIf(a -> a[0] == 1 && a[1] == 2);
        System.out.println("\nTras eliminar arista (1,2):");
        mostrarAristas(aristas);

        // eliminar vértice 2
        aristas.removeIf(a -> a[0] == 2 || a[1] == 2);
        System.out.println("\nTras eliminar vértice 2:");
        mostrarAristas(aristas);

        System.out.print("\nAdyacentes de 0: ");
        for (int[] a : aristas) if (a[0] == 0) System.out.print(a[1] + " ");

        int grado = (int) aristas.stream().filter(a -> a[0] == 1).count();
        System.out.println("\nGrado de 1: " + grado);
    }

    static void mostrarAristas(List<int[]> aristas) {
        for (int[] a : aristas) System.out.println(Arrays.toString(a));
    }
}
