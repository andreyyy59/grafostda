import java.util.*;  // Importamos las clases necesarias para las estructuras de datos (Map, List, etc.)

public class GrafoDemo {
    // Punto de entrada principal para ejecutar el programa
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);  // Objeto para leer la entrada del usuario
        System.out.println("Selecciona tipo de representación:\n1. Lista\n2. Matriz\n3. Aristas");
        int tipo = sc.nextInt();  // Leemos la opción seleccionada por el usuario

        // Dependiendo de la opción, se llama a la función correspondiente
        switch (tipo) {
            case 1 -> demoListaAdyacencia();   // Si seleccionan 1, demostramos Lista de Adyacencia
            case 2 -> demoMatrizAdyacencia();   // Si seleccionan 2, demostramos Matriz de Adyacencia
            case 3 -> demoListaAristas();      // Si seleccionan 3, demostramos Lista de Aristas
            default -> System.out.println("Opción no válida.");  // Si la opción no es válida
        }
    }

    // ---------------------------- Lista de Adyacencia ----------------------------
    static void demoListaAdyacencia() {
        // Creamos un grafo con un Map donde las llaves son los vértices y los valores son listas de adyacentes
        Map<Integer, List<Integer>> grafo = new HashMap<>();
        for (int i = 0; i < 4; i++) grafo.put(i, new ArrayList<>());  // Inicializamos 4 vértices con listas vacías
        
        // Añadimos conexiones (aristas) entre vértices
        grafo.get(0).add(1);  
        grafo.get(1).add(2);  
        grafo.get(2).add(3);

        // Mostramos el grafo
        System.out.println("Lista de Adyacencia:");
        grafo.forEach((k, v) -> System.out.println(k + " -> " + v));

        // Eliminamos una arista y mostramos el resultado
        grafo.get(1).remove(Integer.valueOf(2));  
        System.out.println("\nTras eliminar arista (1,2):");
        grafo.forEach((k, v) -> System.out.println(k + " -> " + v));

        // Eliminamos un vértice y sus conexiones
        grafo.remove(2);
        for (List<Integer> vecinos : grafo.values()) {
            vecinos.remove(Integer.valueOf(2));  
        }
        System.out.println("\nTras eliminar vértice 2:");
        grafo.forEach((k, v) -> System.out.println(k + " -> " + v));

        // Mostramos los adyacentes del vértice 0
        System.out.println("\nAdyacentes de 0: " + grafo.get(0));

        // Mostramos el grado del vértice 1 (número de conexiones)
        System.out.println("Grado de 1: " + grafo.get(1).size());
    }

    // ---------------------------- Matriz de Adyacencia ----------------------------
    static void demoMatrizAdyacencia() {
        // Creamos una matriz 4x4 para representar el grafo
        int[][] matriz = new int[4][4];
        matriz[0][1] = 1;  // Nodo 0 está conectado a nodo 1
        matriz[1][2] = 1;  // Nodo 1 está conectado a nodo 2
        matriz[2][3] = 1;  // Nodo 2 está conectado a nodo 3

        // Mostramos la matriz de adyacencia
        System.out.println("Matriz de Adyacencia:");
        mostrarMatriz(matriz);

        // Eliminamos la arista (1,2)
        matriz[1][2] = 0;  
        System.out.println("\nTras eliminar arista (1,2):");
        mostrarMatriz(matriz);

        // Eliminamos el vértice 2 (eliminamos la fila y columna correspondientes)
        for (int i = 0; i < 4; i++) {
            matriz[2][i] = 0;  
            matriz[i][2] = 0;  
        }
        System.out.println("\nTras eliminar vértice 2:");
        mostrarMatriz(matriz);

        // Mostramos los adyacentes del vértice 0
        System.out.print("\nAdyacentes de 0: ");
        for (int j = 0; j < 4; j++) {
            if (matriz[0][j] == 1) System.out.print(j + " ");
        }
        System.out.println();

        // Mostramos el grado del vértice 1
        System.out.println("Grado de 1: " + Arrays.stream(matriz[1]).sum());
    }

    // Función para imprimir la matriz de adyacencia
    static void mostrarMatriz(int[][] m) {
        for (int[] fila : m) {
            System.out.println(Arrays.toString(fila));  // Imprime cada fila de la matriz
        }
    }

    // ---------------------------- Lista de Aristas ----------------------------
    static void demoListaAristas() {
        // Creamos una lista de aristas
        List<int[]> aristas = new ArrayList<>();
        aristas.add(new int[]{0, 1});  
        aristas.add(new int[]{1, 2});  
        aristas.add(new int[]{2, 3});

        // Mostramos la lista de aristas
        System.out.println("Lista de Aristas:");
        mostrarAristas(aristas);

        // Eliminamos la arista (1,2)
        aristas.removeIf(a -> a[0] == 1 && a[1] == 2);  
        System.out.println("\nTras eliminar arista (1,2):");
        mostrarAristas(aristas);

        // Eliminamos el vértice 2 (eliminamos las aristas que contienen el vértice 2)
        aristas.removeIf(a -> a[0] == 2 || a[1] == 2);  
        System.out.println("\nTras eliminar vértice 2:");
        mostrarAristas(aristas);

        // Mostramos los adyacentes del vértice 0
        System.out.print("\nAdyacentes de 0: ");
        for (int[] a : aristas) {
            if (a[0] == 0) System.out.print(a[1] + " ");
        }

        // Mostramos el grado del vértice 1
        int grado = (int) aristas.stream().filter(a -> a[0] == 1).count();  // Contamos cuántas aristas parten del nodo 1
        System.out.println("\nGrado de 1: " + grado);
    }

    // Función para imprimir la lista de aristas
    static void mostrarAristas(List<int[]> aristas) {
        for (int[] a : aristas) {
            System.out.println(Arrays.toString(a));  // Imprime cada arista en la lista
        }
    }
}
